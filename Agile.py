#Agile - проворный

# Chapter one:
# Model waterfall -
#     1) Требования
#     2) Дизайн
#     3) Реализация
#     4) Проверка
#     5) Обслуживание
# Как можно раньше создать полное описание
# ПО, которое будет разрабатываться.
# После
# того как все пользователи, менеджеры и руководители согласуют точные
# требования к программному продукту, они могут подписать документ
# (спецификацию). Он содержит требования к команде разработчиков, ко-
# торая создает именно то, что написано. После этого приходят тестировщи-
# ки и проверяют, соответствует ли программное обеспечение документу.
# Многие agile-практики называют это «большими требованиями вначале»
# (big requirements up front, или BRUF).
# Команды, разрабатывающие прекрасное ПО при помощи водопад-
# ного подхода, как правило, имеют несколько общих характеристик. Это:
# — хорошая коммуникация, потому что успешные команды, уполномо-
# ченные компанией вести водопадную разработку, постоянно подде-
# рживают контакт со своими пользователями, менеджерами и руково-
# дителями на протяжении всего проекта;
# — хорошие методики, особенно такие как анализ кода и автоматизиро-
# ванное тестирование, которые направлены на поиск ошибок на ран-
# нем этапе. Обычно это называется «предотвращение дефектов» и необ-
# ходимо команде, чтобы прежде всего понять, как эти ошибки попали
# в код;
# — ящики, полные документации, которые редко открываются, потому
# что люди в команде понимают, что сам факт написания плана и воп-
# росы, которые возникают во время планирования, — это важнее, чем
# слепое следование этому плану.

# Ключевые моменты:
# -Водопадный подход требует от команды полного описания про-
# граммного обеспечения в начале проекта, а затем точного со-
# здания того, что было описано.
# -Водопадный подход затрудняет возможность реагировать
# на изменения из-за сосредоточения внимания на документах,
# а не на сотрудничестве.
# -Серебряной пули, или практики, которая помогает создавать
# безупречные проекты, не существует.
# -Команды, использующие водопадный подход, делают это путем
# принятия эффективных методов и принципов создания ПО, осо-
# бенно таких, которые улучшают коммуникацию.


# Scrum «схватка» — метод управления проектами, используется как в сфере разработки ПО, так и в других производственных бизнес-отраслях:
# Роли
# В методологии Scrum всего три роли:
# -Scrum Master
# -Product Owner
# -Team
# http://agilerussia.ru/methodologies/обзор-методологии-scrum/

# Ключевые моменты:
# -Налаживание связи помогает команде лучше управлять измене-
# ниями.
# -Планирование в команде важнее, чем чрезмерное документиро-
# вание плана и слепое следование ему.
# -Программные проекты были непредсказуемы и имели плохие
# результаты начиная с 1960‑х годов, эта ситуация называлась
# «кризис программного обеспечения».
# -Многие команды пытаются «внедрять Agile», после того как
# им удалось улучшить с его помощью те направления, которые
# и так были успешны.
# -Выбор лучших методов приводит к результату «лучше-чем-ни-
# чего», потому что команды принципиально не изменили способ
# общения или работы.
# -Пользовательские истории — это agile-инструмент, в котором
# участник команды (часто владелец продукта) описывает на по-
# нятном пользователю языке необходимые ему отдельные функ-
# ции программного обеспечения.
# -Выборочное применение отдельных элементов Agile в одном про-
# екте — это наиболее распространенный сегодня способ работы
# с Agile, но такой путь стать гибким нельзя назвать самым эф-
# фективным.


# Agile-манифест содержит четыре простые идеи:
# Мы постоянно открываем для себя более совершенные методы разработки программного
# обеспечения, занимаясь непосредственно разработкой и помогая в этом другим.
# Благодаря проделанной работе мы смогли осознать, что:
# -Люди и взаимодействие важнее процессов и инструментов.
# -Работающий программный продукт важнее исчерпывающей документации.
# -Сотрудничество с заказчиком важнее согласования условий контракта.
# -Готовность к изменениям важнее следования первоначальному плану.
# То есть, не отрицая важности того, что справа, мы все-таки больше ценим то, что слева.
# Понимание и эффективная работа с Agile начинается с понимания этих ценностей.

# Agile-команды часто используют доски задач, чтобы размещать на них задачи и отслеживать прогресс.
# Они будут писать задачи или пользовательские истории на карточках и перемещать их по доске,
# отмечая прогресс. Многие команды также рисуют диаграммы на своих досках, чтобы демонстрировать прогресс
# Категории: "сделать", "в процессе", "сделано".
