#Agile - проворный

# Chapter two:
# Model waterfall -
#     1) Требования
#     2) Дизайн
#     3) Реализация
#     4) Проверка
#     5) Обслуживание
# Как можно раньше создать полное описание
# ПО, которое будет разрабатываться.
# После
# того как все пользователи, менеджеры и руководители согласуют точные
# требования к программному продукту, они могут подписать документ
# (спецификацию). Он содержит требования к команде разработчиков, ко-
# торая создает именно то, что написано. После этого приходят тестировщи-
# ки и проверяют, соответствует ли программное обеспечение документу.
# Многие agile-практики называют это «большими требованиями вначале»
# (big requirements up front, или BRUF).
# Команды, разрабатывающие прекрасное ПО при помощи водопад-
# ного подхода, как правило, имеют несколько общих характеристик. Это:
# — хорошая коммуникация, потому что успешные команды, уполномо-
# ченные компанией вести водопадную разработку, постоянно подде-
# рживают контакт со своими пользователями, менеджерами и руково-
# дителями на протяжении всего проекта;
# — хорошие методики, особенно такие как анализ кода и автоматизиро-
# ванное тестирование, которые направлены на поиск ошибок на ран-
# нем этапе. Обычно это называется «предотвращение дефектов» и необ-
# ходимо команде, чтобы прежде всего понять, как эти ошибки попали
# в код;
# — ящики, полные документации, которые редко открываются, потому
# что люди в команде понимают, что сам факт написания плана и воп-
# росы, которые возникают во время планирования, — это важнее, чем
# слепое следование этому плану.

# Ключевые моменты:
# -Водопадный подход требует от команды полного описания про-
# граммного обеспечения в начале проекта, а затем точного со-
# здания того, что было описано.
# -Водопадный подход затрудняет возможность реагировать
# на изменения из-за сосредоточения внимания на документах,
# а не на сотрудничестве.
# -Серебряной пули, или практики, которая помогает создавать
# безупречные проекты, не существует.
# -Команды, использующие водопадный подход, делают это путем
# принятия эффективных методов и принципов создания ПО, осо-
# бенно таких, которые улучшают коммуникацию.


# Scrum «схватка» — метод управления проектами, используется как в сфере разработки ПО,
# так и в других производственных бизнес-отраслях:
# Роли
# В методологии Scrum всего три роли:
# -Scrum Master
# -Product Owner
# -Team
# http://agilerussia.ru/methodologies/обзор-методологии-scrum/

# Ключевые моменты:
# -Налаживание связи помогает команде лучше управлять изменениями.
# -Планирование в команде важнее, чем чрезмерное документирование плана и слепое следование ему.
# -Программные проекты были непредсказуемы и имели плохие результаты начиная с 1960‑х годов,
# эта ситуация называлась «кризис программного обеспечения».
# -Многие команды пытаются «внедрять Agile», после того как им удалось улучшить с его помощью те направления,
# которые и так были успешны.
# -Выбор лучших методов приводит к результату «лучше-чем-ничего»,
# потому что команды принципиально не изменили способ общения или работы.
# -Пользовательские истории — это agile-инструмент, в котором участник команды (часто владелец продукта)
# описывает на понятном пользователю языке необходимые ему отдельные функции программного обеспечения.
# -Выборочное применение отдельных элементов Agile в одном проекте — это наиболее распространенный
# сегодня способ работы с Agile, но такой путь стать гибким нельзя назвать самым эффективным.

# Agile-манифест содержит четыре простые идеи:
# Мы постоянно открываем для себя более совершенные методы разработки программного
# обеспечения, занимаясь непосредственно разработкой и помогая в этом другим.
# Благодаря проделанной работе мы смогли осознать, что:
# -Люди и взаимодействие важнее процессов и инструментов.
# -Работающий программный продукт важнее исчерпывающей документации.
# -Сотрудничество с заказчиком важнее согласования условий контракта.
# -Готовность к изменениям важнее следования первоначальному плану.
# То есть, не отрицая важности того, что справа, мы все-таки больше ценим то, что слева.
# Понимание и эффективная работа с Agile начинается с понимания этих ценностей.

# Agile-команды часто используют доски задач, чтобы размещать на них задачи и отслеживать прогресс.
# Они будут писать задачи или пользовательские истории на карточках и перемещать их по доске,
# отмечая прогресс. Многие команды также рисуют диаграммы на своих досках, чтобы демонстрировать прогресс
# Категории: "сделать", "в процессе", "сделано".

# Ключевые моменты:
# Agile-манифест содержит общие ценности и идеи, которые делают команды эффективными.
# «Люди и взаимодействие важнее процессов и инструментов» означает, что команда должна сосредоточиться
# на людях и прежде всего на том, как они общаются, а затем уже на инструментах и методах,
# которые они используют. «Работающий программный продукт важнее исчерпывающей документации» означает,
# что поставка программного обеспечения, которое делает именно то, что от него нужно пользователю,
# значительно ценнее, чем поставка спецификации, описывающей это ПО.
# «Работающий программный продукт» означает такое ПО, которое обеспечивает ценность компании.
# «Сотрудничество с заказчиком важнее согласования условий контракта» означает уважительное отношение ко всем,
# как будто они в одной команде.
# Многие эффективные agile-команды рассматривают владельца продукта в качестве члена проектной группы,
# с которым нужно сотрудничать, а не только вести переговоры как с клиентом или заказчиком.
# «Готовность к изменениям важнее следования первоначальному плану» означает признание того,
# что планы становятся неточными, и поэтому главное — поставить программное обеспечение,
# а не только разработать план работы.
# Доска задач — это инструмент agile-планирования, в котором пользовательские истории крепятся к доске
# и делятся на столбцы в зависимости от своего статуса в текущем проекте или итерации.

# SCRUM:
# Scrum можно сформулировать (но не применять) очень просто:
# — Команда и спонсоры проекта создают упорядоченный список всего, что нужно сделать. Это могут быть задачи или
# функции. Перечень обозначается как невыполненный бэклог продукта.
# — Каждый месяц команда вытягивает верхнюю часть списка, которую она оценивает как часть работы на месяц.
# Расширяет и детализирует перечень задач и называет его бэклогом спринта. Команда обещает спонсорам продемонстриро-
# вать или предоставить результаты работы в конце месяца.
# — Каждый день члены команды собираются вместе на пятьдесять минут, чтобы сообщить друг другу о состоянии дел
# и любых препятствиях, которые тормозят их. Это называется ежедневным митингом.
# — Кто-то один назначается scrum-мастером. Задача этого человека — самому или с чужой помощью устранить любые
# проблемы, о которых говорится на ежедневных совещаниях*.

# Вторая методология — экстремальное программирование (или XP).
# Scrum и XP имеют много общего, включая тот факт, что они итерационные. Это означает, что проект делится на итерации,
# в которых команда выполняет все активности полного проекта, необходимые, чтобы произвести развертывание программного
# обеспечения в конце каждой итерации. Некоторые XP-команды используют итерации, длящиеся неделю, а scrum-команды—
# длиною в месяц. Установка ограничений на продолжительность итераций называется таймбоксинг (timeboxing),
# и это помогает пользователям узнавать, когда они могут ожидать появления дополнительных функций у ПО.

# Lean — это не методология, а скорее образ мышления. Он имеет собственный набор ценностей и инструментов мышления,
# помогающих принять его. Lean так же важен для мира Agile, как XP и Scrum, и вы сможете многое узнать о том,
# что значит быть гибким, если разглядите общее между ними.

# Канбан — это agile-метод, помогающий командам улучшать сборку программного обеспечения.
# Он строится на ценностях Lean и включает собственные методы, помогающие команде лучше работать и развиваться.

# Ключевые моменты:
# Команда, которая фокусируется только на отдельных практиках, может упустить из виду более глобальные цели,
# такие как улучшение коммуникации и реагирование на изменения.
# Agile-методологии — это набор практик в сочетании с идеями, советами и опытом сообщества специалистов-практиков.
# Такие agile-методологии, как Scrum, XP и Lean, включают в себя большой набор практик, но они также акцентируют
# внимание на идеях, которые помогают удерживать внимание команды на достижении этих целей.
# Agile-коучи часто используют метафоры в качестве инструмента, чтобы помочь своим командам учиться.

# Charter three:

# 12 принципов гибкой разработки программного обеспечения:
# 1. Наш наивысший приоритет — это удовлетворение заказчика при помощи частых и непрерывных поставок ценного
# для него программного обеспечения.
# 2. Мы принимаем изменения в требованиях даже на поздних этапах реализации проекта. Agile-процессы позволяют
# использовать изменения для повышения конкурентоспособности продукта.
# 3. Мы стремимся поставлять полностью рабочее программное обеспечение каждые несколько недель,
# в крайнем случае — каждые несколько месяцев. Чем чаще, тем лучше.
# 4. Наиболее эффективный и действенный способ передачи информации — это встреча членов команды разработки ПО.
# 5. Представители бизнеса и команда разработки должны работать над проектом вместе.
# 6. Проекты строятся вокруг мотивированных людей. Создайте для них подходящую окружающую среду,
# снабдите всем необходимым и доверьте сделать свою работу.
# 7. Рабочее программное обеспечение — это главная мера прогресса проекта.
# 8. Гибкие процессы способствуют непрерывному развитию. Спонсоры, разработчики и пользователи должны иметь
# возможность поддерживать постоянный темп работы в течение неопределенного срока.
# 9. Постоянное внимание к техническому совершенству и качественной архитектуре способствует гибкости.
# 10 . Простота — это искусство не делать лишней работы.
# 11 . Лучшая архитектура, требования и дизайн создаются в самоорганизующихся командах.
# 12 . Команда постоянно ищет способы стать более эффективной путем настройки и коррекции своих действий*.

# Ключевые моменты:
# 12 принципов гибкой разработки, которые сопровождают Agile манифест, укажут agile-практикам направление, в котором
# надо работать, и дадут понимание методов и методологий.
# Agile-команды удовлетворяют своих клиентов, получая обратную связь на ранних этапах проекта, и непрерывно поставляют
# программное обеспечение, чтобы сохранить эту связь актуальной (принцип № 1 "Наивысшим приоритетом для нас является
# удовлетворение потребностей заказчика благодаря регулярной и ранней поставке ценного программного обеспечения").
# Agile-команды одобряют изменения, рассматривая их как положительные и полезные события для проекта (принцип № 2
# "Изменение требований приветствуется даже на поздних стадиях разработки. Agile-процессы позволяют использовать
# изменения для обеспечения заказчику конкурентного преимущества").
# Используя ограниченную продолжительность итераций при частой поставке работающего программного обеспечения, agile-
# команды постоянно корректируют проект, поэтому он обеспечивает наибольшую ценность для потребителя (принцип № 3
# "Работающий продукт следует выпускать как можно чаще, с периодичностью от пары недель до пары месяцев").

# Некоторые функции более значимы для компании, чем остальные.
# Команде нужно сбалансировать ценности (сколько стоит функция) по отношению к затратам
# (сколько потребуется работы для ее создания) при определении, какие из них следует включить в каждую итерацию

# Вот некоторые распространенные антистимулы, которые работают против agile-команд:
# — программистам предоставляется недостаточно подробный анализ эффективности: при анализе кода регулярно повторяются
# ошибки и им присваивается статус «чистый» код (в результате программисты перестают искать ошибки в анализе кода);
# — тестировщиков награждают за количество ошибок, которые они обнаруживают (тем самым поощряются придирки
# и плохая отчетность, а также нарушается сотрудничество с программистами, потому что это создает антагонистические
# отношения между ними);
# — оценки эффективности бизнес-аналитиков базируются на количестве производимой документации
# (а не объеме знаний, которыми они поделились с командой).

# Ключевые моменты:
# Слишком подробная документация повышает риск неоднозначности, недопонимания и расхождений во взглядах между члена-
# ми команды.
# Наиболее эффективное общение между членами agile-команды происходит тогда, когда они сосредоточены на разговоре лицом
# к лицу и опираются на минимальное количество документации, необходимой для реализации проекта (принцип № 4
# "Непосредственное общение является наиболее практичным и эффективным способом обмена информацией как с самой командой,
# так и внутри команды").
# Для достижения наибольшей ценности программного продукта разработчики ежедневно общаются с бизнес-пользователями
# (принцип № 5 "На протяжении всего проекта разработчики и представители бизнеса должны ежедневно работать вместе").
# Каждый член agile-команды чувствует свою ответственность за проект и отвечает за успех (принцип № 6
# "Над проектом должны работать мотивированные профессионалы. Чтобы работа была сделана, создайте условия,
# обеспечьте поддержку и полностью доверьтесь им").
